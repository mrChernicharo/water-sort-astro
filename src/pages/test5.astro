---

---

<style is:global>
    :root {
        --tube-width: 50px;
        --tube-height: 200px;
    }
    * {
        box-sizing: border-box;
    }

    #board {
        display: flex;
        flex-wrap: wrap;
        border: 1px dashed gray;
        padding: 64px;
        gap: 128px;
    }

    .tube {
        position: relative;
        width: var(--tube-width);
        height: var(--tube-height);
        display: flex;
        flex-direction: column-reverse;
        border: 1px solid;
        overflow: hidden;
    }

    .liquid {
        position: relative;
        width: 100%;
        height: 25%;
    }

    .marker {
        position: relative;
        width: 100px;
        height: 1px;
        /* background-color: red; */
        translate: 0px 0px;
        top: 0;
        pointer-events: none;
    }
    .marker[data-side="left"] {
        left: -50px;
    }
    .marker[data-side="right"] {
        right: 0;
    }

    .layer {
        position: absolute;
        transform-origin: top;
        /* opacity: 0.25; */
        width: 500px;
        height: 500px;
        translate: -200px 0px;

        pointer-events: none;
    }
</style>

<h1>ok</h1>

<div id="board"></div>

<button class="pour" data-idx="3">Pour 3</button>
<button class="pour" data-idx="2">Pour 2</button>
<button class="pour" data-idx="1">Pour 1</button>
<button class="pour" data-idx="0">Pour 0</button>

<input type="range" class="rotation-slider" value="0" min="-90" max="90" />

<hr />

<input type="range" class="liquid-slider" step="5" value="25" min="0" max="100" />
<input type="range" class="liquid-slider" step="5" value="25" min="0" max="100" />
<input type="range" class="liquid-slider" step="5" value="25" min="0" max="100" />
<input type="range" class="liquid-slider" step="5" value="25" min="0" max="100" />

<script>
    import gsap from "gsap";
    import { COLORS, type Color } from "../scripts/constants";
    import { parseMap, wait } from "../scripts/helpers";

    // const map = "rzag";
    const map = "baba rrra ____";

    const boardEle = document.querySelector("#board") as HTMLDivElement;

    const pourBtns = [...document.querySelectorAll("button.pour")] as HTMLButtonElement[];
    pourBtns.forEach((btn) => {
        btn.onclick = (e) => {
            pour(0, Number(btn.dataset["idx"]));
        };
    });

    const rotateSlider = document.querySelector("input.rotation-slider") as HTMLInputElement;
    rotateSlider.oninput = (e) => {
        rotateTube(0, (e.target as HTMLInputElement).valueAsNumber);
    };

    const liquidSliders = [
        ...document.querySelectorAll("input.liquid-slider"),
    ] as HTMLInputElement[];
    liquidSliders.forEach((slider, i) => {
        slider.oninput = (e) => {
            setLiquidHeight(0, i, slider.valueAsNumber);
        };
    });

    function renderBoard() {
        const tubes = parseMap(map);

        tubes.forEach((tube, i) => renderTube(tube, i));
    }

    function renderTube(tube: string, i: number) {
        const tubeEle = document.createElement("div");
        tubeEle.classList.add("tube");
        tubeEle.dataset["idx"] = String(i);
        tube.split("").forEach((char, j) => {
            const cssColor = COLORS[char as Color];

            if (char == "_") return;

            const liquid = document.createElement("div");
            liquid.classList.add("liquid");
            liquid.dataset["idx"] = String(j);
            liquid.style.zIndex = String(tube.length - j);

            ["left", "right"].forEach((side) => {
                const marker = document.createElement("div");
                marker.classList.add("marker");
                marker.dataset["side"] = side;

                const layer = document.createElement("div");
                layer.classList.add("layer");
                layer.dataset["side"] = side;
                layer.dataset["idx"] = String(j);

                layer.style.backgroundColor = cssColor;
                // layer.style.zIndex = String(j + 1);

                marker.append(layer);
                liquid.append(marker);
            });
            tubeEle.append(liquid);
        });

        boardEle.append(tubeEle);
    }

    function getTubeByIdx(idx: number): HTMLDivElement | null {
        return boardEle.querySelector(`.tube[data-idx="${idx}"]`);
    }

    function getTubeLiquids(tubeIdx: number) {
        const tubeEle = getTubeByIdx(tubeIdx);
        if (!tubeEle) return null;
        const liquidElems = [...tubeEle?.children] as HTMLDivElement[];
        return liquidElems;
    }

    function getLiquidByIdx(tubeIdx: number, liquidIdx: number) {
        const liquidElems = getTubeLiquids(tubeIdx);
        return liquidElems?.find((lq) => liquidIdx == Number(lq.dataset["idx"])) ?? null;
    }

    function getAllMarkers(tubeIdx: number) {
        const markers: HTMLDivElement[] = [];
        const liquids = getTubeLiquids(tubeIdx) ?? [];
        liquids.forEach((lq) => {
            const lqmarkers = [...lq.children] as HTMLDivElement[];
            lqmarkers.forEach((marker) => {
                markers.push(marker);
            });
        });
        return markers;
    }

    function getAllLayers(tubeIdx: number) {
        const layers: HTMLDivElement[] = [];
        getAllMarkers(tubeIdx).forEach((mk) => {
            [...mk.children].forEach((ele) => {
                if (ele.classList.contains(".layer")) {
                    layers.push(ele as HTMLDivElement);
                }
            });
        });
        return layers;
    }

    function rotateTube(tubeIdx: number, angle: number) {
        return new Promise((resolve) => {
            const tubeEle = getTubeByIdx(tubeIdx);
            if (!tubeEle) return resolve(true);

            getAllMarkers(tubeIdx).forEach((marker) => {
                if (angle < 0) {
                    if (marker.dataset["side"] == "left") {
                        marker.style.visibility = "visible";
                    } else {
                        marker.style.visibility = "hidden";
                    }
                } else if (angle > 0) {
                    if (marker.dataset["side"] == "left") {
                        marker.style.visibility = "hidden";
                    } else {
                        marker.style.visibility = "visible";
                    }
                }

                gsap.to(marker, { rotate: `${-angle}deg`, ease: "linear" });
            });
            gsap.to(tubeEle, { rotate: `${angle}deg`, ease: "linear" }).then(resolve);
        });
    }

    function setLiquidHeight(tubeIdx: number, liquidIdx: number, height: number) {
        return new Promise((resolve) => {
            const liquidEle = getLiquidByIdx(tubeIdx, liquidIdx);
            if (!liquidEle) return;
            // liquidEle.style.height = `${height}%`;
            gsap.to(liquidEle, { height: `${height}%`, ease: "linear" }).then(resolve);
        });
    }

    const pourData: Record<number, Record<number, number>> = {
        3: {
            3: 0,
            2: 30,
            1: 30,
            0: 40,
        },
        2: {
            3: 0,
            2: 0,
            1: 42,
            0: 58,
        },
        1: {
            3: 0,
            2: 0,
            1: 0,
            0: 80,
        },
        0: {
            3: 0,
            2: 0,
            1: 0,
            0: 0,
        },
    };
    const rotationData: Record<number, number> = {
        0: 91,
        1: 80,
        2: 68,
        3: 50,
    };

    async function pour(tubeIdx: number, liquidIdx: number) {
        const tubeElems = getTubeLiquids(tubeIdx);
        if (!tubeElems) return;
        const liquidEle = getLiquidByIdx(tubeIdx, liquidIdx);
        console.log("pour", liquidEle, liquidIdx);

        const doPour = async (liquidIdx: number) => {
            setLiquidHeight(tubeIdx, 3, pourData?.[liquidIdx]?.[3]);
            setLiquidHeight(tubeIdx, 2, pourData?.[liquidIdx]?.[2]);
            setLiquidHeight(tubeIdx, 1, pourData?.[liquidIdx]?.[1]);
            setLiquidHeight(tubeIdx, 0, pourData?.[liquidIdx]?.[0]);
            await rotateTube(tubeIdx, rotationData[liquidIdx]);
            tubeElems[liquidIdx]?.remove();
        };

        const rotateBack = async () => {
            setLiquidHeight(tubeIdx, 3, 25);
            setLiquidHeight(tubeIdx, 2, 25);
            setLiquidHeight(tubeIdx, 1, 25);
            setLiquidHeight(tubeIdx, 0, 25);
            await rotateTube(tubeIdx, 0);
        };

        // what's the liquid level? (skip)
        switch (liquidIdx) {
            case 3:
                await doPour(3);
                break;
            case 2:
                await doPour(3);
                await doPour(2);
                break;
            case 1:
                await doPour(3);
                await doPour(2);
                await doPour(1);
                break;
            case 0:
                await doPour(3);
                await doPour(2);
                await doPour(1);
                await doPour(0);
                break;
        }
        rotateBack();
    }

    renderBoard();
</script>
